/**
* ProjectEuler Problem 3: Largest Prime Factor
*
* Find the largest prime factor of the number 600851475143.
*/

#include <iostream>


/*************************************************************************
* Function that takes in two integers, a and b, and returns their greatest
* common denominator.
*/
int gcd(int a, int b) {

	// TODO: Write gcd method

	return 0;
}

/*****************************************************************************
* Method that computes and returns a number from a sequence generated by
* (x^2 + 1) mod n, where x is the initial value selected, and n is the number
* being factored.
*
* Normally, g(x) = (x^2 - 1) mod n, but it is more popular nowadays to use the
* function chosen.
*/
int gFunc(int absDiff, int n) {

	// TODO: Write g(x) method

	return 0;
}

/**********************
* Main driver function.
*/
int main() {

	// Using Pollard's rho algorithm

	long n        = 600851475143; // Number we would like to find the prime factors of.
	int  x        = 2           ; // Arbitrarily-chosen value, to be fixed.
	int  y        = 2           ; // Arbitrarily-chosen value, variable.
	int  f        = 1           ; // Storage for checking if our prime factor is 1.
	int  cycleNum = 2           ; // Initial cycle value.

	while(x < n) {
		for (int i = 1; i < cycleNum && f <= 1; i++) {
			y = gFunc( y,      n); // calculate our next x using the g-function.
			f = gcd  ((y - x), n); // Get our next factor.
		}

		cycleNum *= 2; // Increase our cycles a la binary tree.
		x         = y; // Update our values.
	}

	std::cout << "The factor is " << f << std::endl;
	
	return EXIT_SUCCESS;
}